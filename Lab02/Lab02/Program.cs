// See https://aka.ms/new-console-template for more information

int[] numbers =
[
    449, 741, 146, 387, 777, 981, 9, 502, 287, 152, 197, 263, 954, 116, 632, 190, 532, 641, 63, 735, 270, 45, 537, 688,
    657, 391, 551, 485, 904, 212, 139, 53, 285, 950, 156, 701, 996, 898, 306, 913, 113, 638, 149, 542, 820, 543, 857,
    880, 743, 596, 565, 919, 172, 493, 559, 537, 398, 348, 977, 922, 83, 292, 341, 835, 142, 344, 1013, 703, 910, 137,
    888, 516, 226, 322, 712, 572, 324, 1003, 958, 718, 700, 974, 492, 84, 197, 944, 46, 662, 231, 1003, 842, 710, 880,
    1001, 936, 177, 432, 399, 33, 101, 517, 525, 833, 438, 238, 356, 98, 32, 788, 725, 4, 126, 743, 858, 603, 174, 2,
    407, 933, 757, 884, 84, 140, 550, 717, 901, 109, 759, 25, 281, 653, 604, 902, 773, 615, 692, 633, 91, 992, 678, 395,
    120, 29, 491, 537, 446, 106, 57, 109, 879, 418, 125, 545, 332, 570, 409, 159, 146, 447, 762, 801, 475, 231, 724, 66,
    612, 373, 984, 618, 582, 64, 82, 545, 234, 909, 499, 651, 133, 317, 294, 574, 824, 957, 722, 622, 197, 457, 406,
    288, 327, 329, 761, 3, 883, 216, 346, 716, 73, 924, 519, 76, 512, 979, 641, 287, 152, 794, 577, 768, 379, 708, 420,
    800, 148, 261, 82, 711, 820, 692, 336, 569, 52, 462, 886, 98, 1, 616, 398, 355, 600, 323, 718, 372, 229, 60, 805,
    675, 746, 532, 494, 429, 604, 284, 329, 487, 65, 695, 952, 84, 309, 416, 566, 240, 829, 768, 918, 449, 741, 146,
    387, 777, 981, 9, 502, 287, 152, 197, 263, 954, 116, 632, 190, 532, 641, 63, 735, 270, 45, 537, 688,
    657, 391, 551, 485, 904, 212, 139, 53, 285, 950, 156, 701, 996, 898, 306, 913, 113, 638, 149, 542, 820, 543, 857,
    880, 743, 596, 565, 919, 172, 493, 559, 537, 398, 348, 977, 922, 83, 292, 341, 835, 142, 344, 1013, 703, 910, 137,
    888, 516, 226, 322, 712, 572, 324, 1003, 958, 718, 700, 974, 492, 84, 197, 944, 46, 662, 231, 1003, 842, 710, 880,
    1001, 936, 177, 432, 399, 33, 101, 517, 525, 833, 438, 238, 356, 98, 32, 788, 725, 4, 126, 743, 858, 603, 174, 2,
    407, 933, 757, 884, 84, 140, 550, 717, 901, 109, 759, 25, 281, 653, 604, 902, 773, 615, 692, 633, 91, 992, 678, 395,
    120, 29, 491, 537, 446, 106, 57, 109, 879, 418, 125, 545, 332, 570, 409, 159, 146, 447, 762, 801, 475, 231, 724, 66,
    612, 373, 984, 618, 582, 64, 82, 545, 234, 909, 499, 651, 133, 317, 294, 574, 824, 957, 722, 622, 197, 457, 406,
    288, 327, 329, 761, 3, 883, 216, 346, 716, 73, 924, 519, 76, 512, 979, 641, 287, 152, 794, 577, 768, 379, 708, 420,
    800, 148, 261, 82, 711, 820, 692, 336, 569, 52, 462, 886, 98, 1, 616, 398, 355, 600, 323, 718, 372, 229, 60, 805,
    675, 746, 532, 494, 429, 604, 284, 329, 487, 65, 695, 952, 84, 309, 416, 566, 240, 829, 768, 918, 449, 741, 146,
    387, 777, 981, 9, 502, 287, 152, 197, 263, 954, 116, 632, 190, 532, 641, 63, 735, 270, 45, 537, 688,
    657, 391, 551, 485, 904, 212, 139, 53, 285, 950, 156, 701, 996, 898, 306, 913, 113, 638, 149, 542, 820, 543, 857,
    880, 743, 596, 565, 919, 172, 493, 559, 537, 398, 348, 977, 922, 83, 292, 341, 835, 142, 344, 1013, 703, 910, 137,
    888, 516, 226, 322, 712, 572, 324, 1003, 958, 718, 700, 974, 492, 84, 197, 944, 46, 662, 231, 1003, 842, 710, 880,
    1001, 936, 177, 432, 399, 33, 101, 517, 525, 833, 438, 238, 356, 98, 32, 788, 725, 4, 126, 743, 858, 603, 174, 2,
    407, 933, 757, 884, 84, 140, 550, 717, 901, 109, 759, 25, 281, 653, 604, 902, 773, 615, 692, 633, 91, 992, 678, 395,
    120, 29, 491, 537, 446, 106, 57, 109, 879, 418, 125, 545, 332, 570, 409, 159, 146, 447, 762, 801, 475, 231, 724, 66,
    612, 373, 984, 618, 582, 64, 82, 545, 234, 909, 499, 651, 133, 317, 294, 574, 824, 957, 722, 622, 197, 457, 406,
    288, 327, 329, 761, 3, 883, 216, 346, 716, 73, 924, 519, 76, 512, 979, 641, 287, 152, 794, 577, 768, 379, 708, 420,
    800, 148, 261, 82, 711, 820, 692, 336, 569, 52, 462, 886, 98, 1, 616, 398, 355, 600, 323, 718, 372, 229, 60, 805,
    675, 746, 532, 494, 429, 604, 284, 329, 487, 65, 695, 952, 84, 309, 416, 566, 240, 829, 768, 918, 449, 741, 146,
    387, 777, 981, 9, 502, 287, 152, 197, 263, 954, 116, 632, 190, 532, 641, 63, 735, 270, 45, 537, 688,
    657, 391, 551, 485, 904, 212, 139, 53, 285, 950, 156, 701, 996, 898, 306, 913, 113, 638, 149, 542, 820, 543, 857,
    880, 743, 596, 565, 919, 172, 493, 559, 537, 398, 348, 977, 922, 83, 292, 341, 835, 142, 344, 1013, 703, 910, 137,
    888, 516, 226, 322, 712, 572, 324, 1003, 958, 718, 700, 974, 492, 84, 197, 944, 46, 662, 231, 1003, 842, 710, 880,
    1001, 936, 177, 432, 399, 33, 101, 517, 525, 833, 438, 238, 356, 98, 32, 788, 725, 4, 126, 743, 858, 603, 174, 2,
    407, 933, 757, 884, 84, 140, 550, 717, 901, 109, 759, 25, 281, 653, 604, 902, 773, 615, 692, 633, 91, 992, 678, 395,
    120, 29, 491, 537, 446, 106, 57, 109, 879, 418, 125, 545, 332, 570, 409, 159, 146, 447, 762, 801, 475, 231, 724, 66,
    612, 373, 984, 618, 582, 64, 82, 545, 234, 909, 499, 651, 133, 317, 294, 574, 824, 957, 722, 622, 197, 457, 406,
    288, 327, 329, 761, 3, 883, 216, 346, 716, 73, 924, 519, 76, 512, 979, 641, 287, 152, 794, 577, 768, 379, 708, 420,
    800, 148, 261, 82, 711, 820, 692, 336, 569, 52, 462, 886, 98, 1, 616, 398, 355, 600, 323, 718, 372, 229, 60, 805,
    675, 746, 532, 494, 429, 604, 284, 329, 487, 65, 695, 952, 84, 309, 416, 566, 240, 829, 768, 918
];

int[] select = (int[])numbers.Clone();
int[] bubble = (int[])numbers.Clone();

var start = DateTime.UtcNow;
SelectSort(select);
var end = DateTime.UtcNow;

Console.WriteLine("Select 256: " + (end - start));

var start2 = DateTime.UtcNow;
BubbleSort(bubble);
var end2 = DateTime.UtcNow;

Console.WriteLine("Bubble 256: " + (end2 - start2));

static void SelectSort(int[] numbers)
{
    for (int i = 0; i < numbers.Length; i++)
    {
        var minIndex = MinIndex(numbers, i);
        (numbers[i], numbers[minIndex]) = (numbers[minIndex], numbers[i]);
    }
}

static int MinIndex(int[] numbers, int start)
{
    var minIndex = 0;
    var min = int.MaxValue;

    for (int i = start; i < numbers.Length; i++)
    {
        if (min > numbers[i])
        {
            minIndex = i;
            min = numbers[i];
        }
    }

    if (minIndex < start)
    {
        return start;
    }

    return minIndex;
}

static void BubbleSort(int[] numbers)
{
    for (int i = 0; i < numbers.Length; i++)
    {
        for (int j = i; j < numbers.Length; j++)
        {
            if (numbers[i] > numbers[j])
            {
                (numbers[i], numbers[j]) = (numbers[j], numbers[i]);
            }
        }
    }
}

